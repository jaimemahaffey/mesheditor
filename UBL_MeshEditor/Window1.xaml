<RibbonWindow x:Class="UBL_MeshEditor.Window1"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:l="clr-namespace:UBL_MeshEditor"
        xmlns:ublMeshEditor="clr-namespace:UBL_MeshEditor"
        xmlns:ublMeshEditor1="clr-namespace:UBL_MeshEditor"
        mc:Ignorable="d"
        Title="Mesh Editor" Height="800" Width="800">
    <Window.Resources>
        <ResourceDictionary>
            <l:ColorToBrushConverter x:Key="ColorToBrushConverter"/>
        </ResourceDictionary>
    </Window.Resources>
    <Window.DataContext>
        <l:MeshViewModel/>
    </Window.DataContext>
    <Grid>
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto"/>
            <RowDefinition Height="*"/>
        </Grid.RowDefinitions>
        <Ribbon>
            <Ribbon.ApplicationMenu>
                <RibbonApplicationMenu>
                    <RibbonApplicationMenuItem Header="Exit" Click="OnExitClicked"/>
                </RibbonApplicationMenu>
            </Ribbon.ApplicationMenu>
            <RibbonTab Header="Data">
                <RibbonGroup Header="Import">
                    <RibbonButton 
                        Label="File"
                        Click="OnImportFileClick"
                        Command="{Binding LoadDataCommand}"
                        CommandParameter="File"
                        SmallImageSource="Resources/placeholder_sm.png"
                        LargeImageSource="Resources/placeholder_lg.png"
                        CanAddToQuickAccessToolBarDirectly="True"></RibbonButton>
                    <RibbonButton 
                        Label="Text"
                        Click="OnPasteTextDataClick"
                        SmallImageSource="Resources/placeholder_sm.png"
                        LargeImageSource="Resources/placeholder_lg.png"
                        CanAddToQuickAccessToolBarDirectly="True"></RibbonButton>
                </RibbonGroup>
                <RibbonGroup Header="Export">
                    <RibbonButton 
                        Label="GCode"
                        Click="OnExportClick"
                        SmallImageSource="Resources/placeholder_sm.png"
                        LargeImageSource="Resources/placeholder_lg.png"
                        CanAddToQuickAccessToolBarDirectly="True"></RibbonButton>
                </RibbonGroup>
                <RibbonGroup Header="Increment">
                    <RibbonTextBox Text="{Binding Increment}" VerticalAlignment="Center" Margin="0,0,0,-60"/>
                </RibbonGroup>
                <RibbonGroup Header="Gradient">
                    <StackPanel Orientation="Horizontal" Grid.Row="0">
                        <Grid Height="45" Width="500">
                            <Border Height="25" VerticalAlignment="Top">
                                <Border.Background>
                                    <LinearGradientBrush GradientStops="{Binding GradientStops}"/>
                                </Border.Background>
                            </Border>
                            <TextBlock Text="{Binding MinValue}" VerticalAlignment="Bottom" HorizontalAlignment="Left"/>
                            <TextBlock Text="{Binding MaxValue}" VerticalAlignment="Bottom" HorizontalAlignment="Right"/>
                        </Grid>
                    </StackPanel>
                </RibbonGroup>
            </RibbonTab>
        </Ribbon>
        <ListBox Grid.Row="1" MinHeight="500" MinWidth="500" x:Name="PointItemsListBox" ItemsSource="{Binding MeshPoints}">
            <ListBox.ItemContainerStyle>
                <Style TargetType="{x:Type ListBoxItem}">
                    <Setter Property="Padding" Value="0"></Setter>
                </Style>
            </ListBox.ItemContainerStyle>
            <ListBox.ItemTemplate>
                <DataTemplate DataType="{x:Type l:MeshPointViewModel}">
                    <Border Width="75" Height="75" BorderThickness="1.5" BorderBrush="{Binding DataColor, Converter={StaticResource ColorToBrushConverter}}">
                        <StackPanel Orientation="Vertical">
                            <UniformGrid Columns="2">
                                <Border BorderThickness="1" Padding="2" BorderBrush="Black" Margin="0,0,5,0">
                                    <TextBlock HorizontalAlignment="Center" Text="{Binding X, StringFormat=X : {0}}"/>
                                </Border>
                                <Border BorderThickness="1" BorderBrush="Black" Padding="2">
                                    <TextBlock HorizontalAlignment="Center" TextAlignment="Center"  Text="{Binding Y, StringFormat=Y : {0}}"/>
                                </Border>
                            </UniformGrid>
                            <UniformGrid Columns="2">
                                <TextBox Text="{Binding Data}" Padding="2" VerticalContentAlignment="Center">
                                    <TextBox.Style>
                                        <Style TargetType="TextBox">
                                            <Style.Triggers>
                                                <DataTrigger Binding="{Binding IsChanged}" Value="True">
                                                    <Setter Property="Foreground" Value="Red"/>
                                                </DataTrigger>
                                            </Style.Triggers>
                                        </Style>
                                    </TextBox.Style>
                                </TextBox>
                                <StackPanel Orientation="Vertical">
                                    <Button Click="OnIncreaseValueClicked">
                                        <Label Content=">">
                                            <Label.LayoutTransform>
                                                <RotateTransform Angle="-90"></RotateTransform>
                                            </Label.LayoutTransform>
                                        </Label>
                                    </Button>
                                    <Button Click="OnDecreaseValueClicked">
                                        <Label Content=">">
                                            <Label.LayoutTransform>
                                                <RotateTransform Angle="90"></RotateTransform>
                                            </Label.LayoutTransform>
                                        </Label>
                                    </Button>
                                </StackPanel>
                            </UniformGrid>
                        </StackPanel>
                    </Border>
                </DataTemplate>
            </ListBox.ItemTemplate>
            <ListBox.ItemsPanel>
                <ItemsPanelTemplate>
                    <UniformGrid Rows="10" Columns="10" Background="AntiqueWhite" Loaded="UniformGridLoaded"/>
                </ItemsPanelTemplate>
            </ListBox.ItemsPanel>
        </ListBox>
    </Grid>
</RibbonWindow>
